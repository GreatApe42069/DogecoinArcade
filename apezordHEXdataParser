from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException
from binascii import unhexlify, hexlify
from bitcoin.core.script import CScript

# Configuration
NODE_RPC_HOST = "127.0.0.1:22555"
NODE_RPC_USER = "your_rpc_user"
NODE_RPC_PASS = "veracity31"
TXID = "15f3b73df7e5c072becb1d84191843ba080734805addfccb650929719080f62e"

def extract_png_data(script_hex):
    script = CScript(unhexlify(script_hex))
    chunks = list(script)

    if len(chunks) < 3 or not isinstance(chunks[0], bytes) or chunks[0].decode() != 'ord':
        raise ValueError('Not a Doginal transaction or invalid script format')

    data = b''.join(chunk for chunk in chunks if isinstance(chunk, bytes))

    # PNG file signature and IEND chunk
    png_start = b'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A'
    png_end = b'\x49\x45\x4E\x44\xAE\x42\x60\x82'

    start_idx = data.find(png_start)
    end_idx = data.find(png_end)

    if start_idx == -1 or end_idx == -1:
        raise ValueError("PNG data not found in the transaction script")

    # Extracting PNG data
    png_data = data[start_idx:end_idx + len(png_end)]
    return png_data

def main():
    try:
        # Construct RPC URL with credentials
        rpc_url = f"http://{NODE_RPC_USER}:{NODE_RPC_PASS}@{NODE_RPC_HOST}"

        # Connect to Dogecoin node via RPC
        rpc_connection = AuthServiceProxy(rpc_url)

        # Retrieve transaction details
        transaction = rpc_connection.getrawtransaction(TXID, 1)
        script_hex = transaction['vin'][0]['scriptSig']['hex']

        # Extract PNG data from transaction
        png_data = extract_png_data(script_hex)

        # Display transaction details and extracted PNG data
        print(f"Transaction Details: {transaction}")
        print(f"Extracted PNG Data: {hexlify(png_data)}")

    except JSONRPCException as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
